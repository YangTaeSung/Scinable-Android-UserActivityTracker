OkHttp 
: 이 프로그램은 URL을 다운로드하고 그 내용을 문자열로 인쇄합니다.

Web browser가 index.html을 Web server로 전송 -> 해석한 뒤에 다시 browser로 반환
Web browser가 index.php을 Web server로 전송한 뒤 Web server는 PHP라는 프로그램으로 PHP파일을 전달
-> PHP는 html파일을 생산해내서 Web server로 다시 전송, Web server는 Web brower로 반환 

HTTP는 전송 프로토콜이고, URI는 자원의 위치를 알려주기 위한 프로토콜

onCreate()
이 콜백은 시스템이 먼저 Activity를 생성할 때 실행되는 것으로, 필수적으로 구현해야 합니다. 
Activity가 생성되면 Activity는 생성됨 상태가 됩니다. 
onCreate() 메서드에서 Activity의 전체 수명 주기 동안 한 번만 발생해야 하는 
기본 애플리케이션 시작 로직을 수행합니다. 예를 들어 onCreate()를 구현하면 데이터를 목록에 바인딩하고, 
Activity를 ViewModel과 연결하고, 일부 클래스 범위 변수를 인스턴스화할 수 있습니다. 
이 메서드는 savedInstanceState 매개변수를 수신하는데, 이는 Activity의 이전 저장 상태가 포함된 Bundle 객체입니다. 
이번에 처음 생성된 Activity인 경우 Bundle 객체의 값은 null입니다.

쿠키가 한 개 아니라 쿠키 종류가 여러개 ( cu, cv 등등)
앱에서 사용될 쿠키의 형태 : "이름=값;만료시간=만료시간" ( 웹에서 사용하는 쿠키는 중간에 두 가지 쌍이 더 포함 )

SharedPreferences의 데이터 파일 위치 
: data/data/(package_name)/shared_prefs/SharedPreference

Javascript에서 만약 함수가 호출될 때 인자를 다 넣어주지 않는다면, 넣어주지 않은 인자값들은 undefined가 된다.

navigator.useragent = 브라우저에 관한 내용 체크. 앱 X

쿠키는 컴퓨터에 작은 텍스트 파일로 저장된 데이터입니다.
웹 서버가 웹 페이지를 브라우저로 보내면 연결이 종료되고 서버는 사용자에 대한 모든 것을 잊어 버립니다.
쿠키는 "사용자에 관한 정보를 기억하는 방법"이라는 문제를 해결하기 위해 고안되었습니다.
사용자가 웹 페이지를 방문하면 자신의 이름을 쿠키에 저장할 수 있습니다.
다음에 사용자가 페이지를 방문하면 쿠키는 자신의 이름을 "기억"합니다.
쿠키는 다음과 같은 이름-값 쌍으로 저장됩니다.
ex) username = John Doe

요즘 홈페이지는 대부분 반응형 홈페이지로 만들어지는데 반응형 홈페이지란 PC뿐 아니라 다양한 디바이스에서도
사용자의 해상도에 따라 레이아웃을 보다 유연하고 강력하게 관리할 수 있도록 설계된 웹사이트이다.
즉, 간단히 말해 반응형 홈페이지는 폰에서도 PC 홈페이지처럼 매끄럽게 화면에 잘 나타나게 하는 유용한 
홈페이지다. WebView는 이런 반응형 웹사이트를 안드로이드 디바이스에서 띄워줄 수 있는 기능이다.
WebView를 이용하여 홈페이지를 앱내에서 호출하여 반응형 및 하이브리드 형태의 앱을 개발하는데 유용하다.
(웹뷰 구현 X)

안드로이드는 웹에 정보 전달 또는 요청을 하면 웹은 서버에 정보를 저장하거나 
호출하는 중간역할을 하는 셈이다. 그 방식은 Http 통신을 통해 이뤄진다.

URI Decode & Encode 
encodeURI() : 일반 문자열을 퍼센트 인코딩된 문자열로 변환
decodeURI() : 인코딩된 문자열을 일반 문자열로 변환

우리가 검색창에 검색을 하던, 혹은 다른 액션을 취하던 URL을 입력 시, 아래와 같이 
문자를 encode하여 데이터를 전송하게 됩니다.
예 : hello zum! => hello+zum%21
예 : 아이유 => %EC%95%84%EC%9D%B4%EC%9C%A0

URL 인코딩은,
URL 스트링에 있는 텍스트를, 모든브라우저에서 똑바로 전송하기 위해 존재한다.
인터넷에서의 URL 은 ASCII 문자열을 이용해서만 전송될 수 있는데, 그렇지 않게 전송한 경우, 브라우저의 특성에 따라, 
question mark(?), ampersand(&), 슬래쉬(/), 공백문자 같은 특수문자의 경우, 잘리거나 (의도치 않게) 변형이 될 수 있다.
그래서, 이런 특수문자는, 인코딩이 되는 것이 좋다. ASCII 에 포함되지 않는 문자들(한글, 일본어 등등)은 더더욱 
encoding 이 필요하다. 인코딩은 %octet 형태로 만들어 주는 것이다. 
(예 : # 는 %23) - 영어로 escapted octet 이라 부른다.

Query String : 서버에게 무엇이 필요한지, 혹은 클라이언트에게 무엇이 필요한지 묻는 문자열.
쿼리스트링은 서버 사이드에서는 클라이언트가 무엇이 필요 한지, 
클라이언트에서는 서버에 무엇이 필요 한지를 올리는 것 이다.
Query String에서 여러 구분 기호로 구분 된 여러 매개 변수를 구문 분석하는 방법을 제공 할 수 있습니다. 
아래 예제 URL에서 여러 쿼리 파라미터는 앰퍼샌드 " &" 로 구분됩니다 .
ex) http://example.com/path/to/page?name=ferret&color=purple
쿼리 파라미터는 URL 끝에 첨부 된 매개 변수 세트입니다. 이들은 전달되는 데이터를 기반으로 특정 컨텐츠
또는 액션을 정의하는데 사용되는 URL의 확장입니다. 쿼리 파라미터를 URL의 끝에 추가하기 위하여 '?'
를 추가합니다. 다수의 파라미터를 추가하기 위하여 파라미터들 사이에 '&'를 추가합니다. 이들은 문자열, 배열 및
숫자와 같은 다양한 객체유형으로 만들 수 있습니다.
ex) http://example.com/path?name=Branch&products=[Journeys,Email,Universal%20Ads]

Android SDK는 앱이 설치될 때 고유 방문자 ID를 생성합니다.
이 ID는 모바일 장치의 영구 메모리에 저장되고 모든 히트와 함께 전송되며 
사용자가 앱 설치를 제거하는 경우에만 제거됩니다.

window : 인터넷 브라우저 전체를 담당하는 Window 객체, 웹사이트만 담당하는 Document
Document도 Window안에 포함, Window는 모든 객체의 조상 - 전역객체, 모든 객체 포함
심지어 내가 만든 변수(scinableObject)도 window.scinableObject로 작동 됨

함수 호출은 선언 전 또는 함수 선언 후에 할 수 있다.

AJAX : AJAX란 비동기 자바스크립트와 XML (Asynchronous JavaScript And XML)을 말합니다. 
간단히 말하면, 서버와 통신하기 위해 XMLHttpRequest 객체를 사용하는 것을 말합니다. JSON, XML, HTML 그리고 
일반 텍스트 형식 등을 포함한 다양한 포맷을 주고 받을 수 있습니다. AJAX의 강력한 특징은 페이지 
전체를 리프레쉬 하지 않고서도 수행 되는 "비동기성"입니다. 이러한 비동기성을 통해 사용자의 
Event가 있으면 전체 페이지가 아닌 일부분만을 업데이트 할 수 있게 해줍니다.
AJAX의 주요 두가지 특징 : 페이지 새로고침 없이 서버에 요청, 서버로부터 데이터를 받고 작업을 수행

HTML은 프로그래밍 언어가 아닙니다. 컨텐츠의 구조를 정의하는 마크업 언어입니다.

CSS(Cascading Style Sheets)는 웹페이지를 꾸미려고 작성하는 코드입니다.
CSS는 프로그래밍 언어는 아닙니다. 마크업 언어도 아닙니다. style sheet 언어입니다.
HTML 문서에 있는 요소들에 선택적으로 스타일을 적용할 수 있습니다.

자바스크립트는 여러분의 웹사이트에 상호작용성(예를 들면, 게임, 버튼이 눌리거나 폼에 자료가 
입력될 때 반응, 동적인 스타일링과 애니메이션)을 더해 주는 프로그래밍 언어입니다.
자바스크립트는 HTML문서에 적용될 때, 웹사이트상에서 동적 상호작용성을 제공할 수 있는
완전한 동적 프로그래밍언어입니다.

익명함수 쓰는 이유 - 변수 유출 방지

DOM(Document Object Model) API는 동적으로 페이지의 스타일을 정하는 등 HTML과 CSS를
알맞게 조정하는 역할을 합니다. 우리가 매일 보는 팝업창이나 컨텐츠들이 보여지는 것들이 모두 
DOM의 결과라고 볼 수 있습니다. 즉 웹페이지에 있는 문서(태그<body>, <img> 등)을 제어합니다.
window 객체가 창을 의미한다면 Document 객체는 윈도우에 로드된 문서를 의미한다고 할 수 있습니다.

BOM(Browser Object Model)은 웹페이지의 내용을 제외한 브라우저의 각종 요소들을 객체화시킨 것이다.
전역객체 Window의 프로퍼티(window.document 제외)에 속한 객체들이 이에 속한다.
BOM은 전역객체인 Window의 프로퍼티와 메소드들을 통해서 제어할 수 있다. 따라서 BOM은 Window 객체의

자바스크립트에는 상속이 없다. Proto type 기반으로 상속을 흉내내도록 구현해 사용한다. 

Array.prototype.push()메서드는 배열의 끝에 하나 이상의 요소를 추가하고, 배열의 새로운 길이를 반환합니다.